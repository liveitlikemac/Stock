{"version":3,"sources":["firebase.js","stock.js","App.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","stock","props","List","className","ListItem","ListItemText","primary","secondary","Button","onClick","event","collection","doc","id","delete","App","useState","stocks","setStocks","inputx","setInputx","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","value","onChange","target","variant","preventDefault","add","timestamp","FieldValue","serverTimestamp","color","disabled","x","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6QAeMA,EAZYC,IAASC,cACvB,CACIC,OAAQ,0CACRC,WAAY,sCACZC,UAAW,sBACXC,cAAe,kCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIFC,Y,QCONC,MAlBf,SAAeC,GACX,OACI,8BACQ,eAACC,EAAA,EAAD,CAAMC,UAAU,aAAhB,UACA,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAcC,QAASL,EAAMD,MAAMA,MAAOO,UAAU,UAIxD,cAACC,EAAA,EAAD,CAAQC,QAAS,SAAAC,GAAK,OAAGrB,EAAGsB,WAAW,UAAUC,IAAIX,EAAMD,MAAMa,IAAIC,UAArE,8B,MCsDDC,MA1Df,WAEA,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KA2BE,OAzBFC,qBAAU,WAGVhC,EAAGsB,WAAW,UAAUW,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAE7DN,EAAUM,EAASC,KAAKC,KAAI,SAAAd,GAAG,MAAI,CAACC,GAAGD,EAAIC,GAAGb,MAAMY,EAAIe,OAAO3B,gBAGhE,IAoBG,sBAAKG,UAAU,MAAf,UAEA,iCACE,+CAEN,eAACyB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,wBACA,uBAAOC,MAAOX,EAAQY,SAAU,SAAArB,GAAK,OAAIU,EAAUV,EAAMsB,OAAOF,aAGlE,cAACtB,EAAA,EAAD,CAAQyB,QAAQ,YAAYxB,QAxBX,SAACC,GAChBA,EAAMwB,iBACN7C,EAAGsB,WAAW,UAAUwB,IACtB,CACEnC,MAAMmB,EACNiB,UAAU9C,IAASS,UAAUsC,WAAWC,oBAG5CpB,EAAU,GAAD,mBAAKD,GAAL,CAAYE,KACrBC,EAAU,KAeoCmB,MAAM,UAAUC,UAAWrB,EAA3E,kCAIA,6BACGF,EAAOS,KAAI,SAAAe,GAAC,OACb,cAAC,EAAD,CAAOzC,MAAOyC,aCpDhBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d1438829.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n\r\n\r\nconst firebaseApp=firebase.initializeApp(\r\n    {\r\n        apiKey: \"AIzaSyDvO8Q3giep_oiKDmX0f6o3dd6M5E1S9l8\",\r\n        authDomain: \"stock-tracker-293ef.firebaseapp.com\",\r\n        projectId: \"stock-tracker-293ef\",\r\n        storageBucket: \"stock-tracker-293ef.appspot.com\",\r\n        messagingSenderId: \"643159548551\",\r\n        appId: \"1:643159548551:web:ad7b37dd03bba1dcee4e22\",\r\n        measurementId: \"G-MSF3WENGRH\"\r\n        }\r\n);\r\n\r\nconst db=firebaseApp.firestore();\r\n// const auth =firebase.auth();\r\n// const storage =firebase.storage();\r\nexport {db};\r\n\r\n","import React from 'react';\r\nimport {ListItem,ListItemText,List,Button } from '@material-ui/core';\r\nimport { db } from './firebase';\r\nimport './stock';\r\nfunction stock(props) {\r\n    return (\r\n        <div>\r\n                <List className=\"stock_list\" >  \r\n                <ListItem>\r\n                    <ListItemText primary={props.stock.stock} secondary=\"NSE\">  \r\n\r\n                    </ListItemText>\r\n                </ListItem>\r\n                <Button onClick={event =>db.collection('stocks').doc(props.stock.id).delete()}>\r\n                    Sell Stock\r\n                </Button>\r\n            </List> \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default stock;","import React,{useState,useEffect} from 'react';\nimport { Button } from '@material-ui/core';\nimport {FormControl ,InputLabel }from '@material-ui/core';\nimport Stock from './stock'\nimport './App.css';\nimport { db } from './firebase';\nimport firebase from 'firebase';\n\n\nfunction App() {\n\nconst [stocks,setStocks]=useState([]);\nconst [inputx,setInputx]= useState('');\n//when the app loads we need to listen to DB and fetch stocks\nuseEffect(() => {\n  //this code fires when app.js loads\n  \ndb.collection('stocks').orderBy('timestamp','desc').onSnapshot(snapshot =>\n  {\n  setStocks(snapshot.docs.map(doc =>({id:doc.id,stock:doc.data().stock})))\n  })\n}\n,[]);\n\n\n\n\n\nconst AddStocks =(event)  => {\n  event.preventDefault();\n  db.collection('stocks').add(\n    {\n      stock:inputx,\n      timestamp:firebase.firestore.FieldValue.serverTimestamp()\n    }\n  )\n  setStocks([...stocks,inputx]);\n  setInputx('');\n}\n  return (  \n\n\n    <div className=\"App\">\n    \n    <form>\n      <h1>Stock Tracker</h1>\n{/* <input value={inputx} onChange={event => setInputx(event.target.value)}/> */}\n<FormControl>\n  <InputLabel >Add stock</InputLabel>\n  <input value={inputx} onChange={event => setInputx(event.target.value)}/>\n  \n</FormControl>\n<Button variant=\"contained\" onClick={AddStocks} color=\"primary\" disabled={!inputx}>\nEnter script name\n</Button>\n</form>\n<ul>\n  {stocks.map(x => (\n  <Stock stock={x}/>\n  ))}\n\n\n</ul>\n     </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}